// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class P2P extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save P2P entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save P2P entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("P2P", id.toString(), this);
  }

  static load(id: string): P2P | null {
    return store.get("P2P", id) as P2P | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commission(): BigInt {
    let value = this.get("commission");
    return value.toBigInt();
  }

  set commission(value: BigInt) {
    this.set("commission", Value.fromBigInt(value));
  }
}

export class P2PCommodity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save P2PCommodity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save P2PCommodity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("P2PCommodity", id.toString(), this);
  }

  static load(id: string): P2PCommodity | null {
    return store.get("P2PCommodity", id) as P2PCommodity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commission(): BigInt {
    let value = this.get("commission");
    return value.toBigInt();
  }

  set commission(value: BigInt) {
    this.set("commission", Value.fromBigInt(value));
  }
}

export class Offer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Offer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Offer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Offer", id.toString(), this);
  }

  static load(id: string): Offer | null {
    return store.get("Offer", id) as Offer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get sellToken(): string {
    let value = this.get("sellToken");
    return value.toString();
  }

  set sellToken(value: string) {
    this.set("sellToken", Value.fromString(value));
  }

  get buyToken(): string {
    let value = this.get("buyToken");
    return value.toString();
  }

  set buyToken(value: string) {
    this.set("buyToken", Value.fromString(value));
  }

  get initialSellAmount(): BigInt {
    let value = this.get("initialSellAmount");
    return value.toBigInt();
  }

  set initialSellAmount(value: BigInt) {
    this.set("initialSellAmount", Value.fromBigInt(value));
  }

  get sellAmount(): BigInt {
    let value = this.get("sellAmount");
    return value.toBigInt();
  }

  set sellAmount(value: BigInt) {
    this.set("sellAmount", Value.fromBigInt(value));
  }

  get buyAmount(): BigInt {
    let value = this.get("buyAmount");
    return value.toBigInt();
  }

  set buyAmount(value: BigInt) {
    this.set("buyAmount", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get isPartial(): boolean {
    let value = this.get("isPartial");
    return value.toBoolean();
  }

  set isPartial(value: boolean) {
    this.set("isPartial", Value.fromBoolean(value));
  }

  get isBuyFiat(): boolean {
    let value = this.get("isBuyFiat");
    return value.toBoolean();
  }

  set isBuyFiat(value: boolean) {
    this.set("isBuyFiat", Value.fromBoolean(value));
  }

  get minDealAmount(): BigInt {
    let value = this.get("minDealAmount");
    return value.toBigInt();
  }

  set minDealAmount(value: BigInt) {
    this.set("minDealAmount", Value.fromBigInt(value));
  }

  get maxDealAmount(): BigInt {
    let value = this.get("maxDealAmount");
    return value.toBigInt();
  }

  set maxDealAmount(value: BigInt) {
    this.set("maxDealAmount", Value.fromBigInt(value));
  }

  get minReputation(): BigInt {
    let value = this.get("minReputation");
    return value.toBigInt();
  }

  set minReputation(value: BigInt) {
    this.set("minReputation", Value.fromBigInt(value));
  }

  get auditor(): Bytes | null {
    let value = this.get("auditor");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set auditor(value: Bytes | null) {
    if (value === null) {
      this.unset("auditor");
    } else {
      this.set("auditor", Value.fromBytes(value as Bytes));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get isOpen(): boolean {
    let value = this.get("isOpen");
    return value.toBoolean();
  }

  set isOpen(value: boolean) {
    this.set("isOpen", Value.fromBoolean(value));
  }

  get country(): Array<BigInt> | null {
    let value = this.get("country");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set country(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get payMethod(): Array<BigInt> | null {
    let value = this.get("payMethod");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set payMethod(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("payMethod");
    } else {
      this.set("payMethod", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get deals(): Array<string> | null {
    let value = this.get("deals");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deals(value: Array<string> | null) {
    if (value === null) {
      this.unset("deals");
    } else {
      this.set("deals", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class OfferCommodity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OfferCommodity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OfferCommodity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OfferCommodity", id.toString(), this);
  }

  static load(id: string): OfferCommodity | null {
    return store.get("OfferCommodity", id) as OfferCommodity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get sellToken(): string {
    let value = this.get("sellToken");
    return value.toString();
  }

  set sellToken(value: string) {
    this.set("sellToken", Value.fromString(value));
  }

  get buyToken(): string {
    let value = this.get("buyToken");
    return value.toString();
  }

  set buyToken(value: string) {
    this.set("buyToken", Value.fromString(value));
  }

  get sellId(): string {
    let value = this.get("sellId");
    return value.toString();
  }

  set sellId(value: string) {
    this.set("sellId", Value.fromString(value));
  }

  get buyAmount(): BigInt {
    let value = this.get("buyAmount");
    return value.toBigInt();
  }

  set buyAmount(value: BigInt) {
    this.set("buyAmount", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get price_per_brute_weight(): BigInt {
    let value = this.get("price_per_brute_weight");
    return value.toBigInt();
  }

  set price_per_brute_weight(value: BigInt) {
    this.set("price_per_brute_weight", Value.fromBigInt(value));
  }

  get price_per_fine_weight(): BigInt {
    let value = this.get("price_per_fine_weight");
    return value.toBigInt();
  }

  set price_per_fine_weight(value: BigInt) {
    this.set("price_per_fine_weight", Value.fromBigInt(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get isOpen(): boolean {
    let value = this.get("isOpen");
    return value.toBoolean();
  }

  set isOpen(value: boolean) {
    this.set("isOpen", Value.fromBoolean(value));
  }

  get country(): Array<BigInt> | null {
    let value = this.get("country");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set country(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("country");
    } else {
      this.set("country", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get payMethod(): Array<BigInt> | null {
    let value = this.get("payMethod");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set payMethod(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("payMethod");
    } else {
      this.set("payMethod", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get deals(): Array<string> | null {
    let value = this.get("deals");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deals(value: Array<string> | null) {
    if (value === null) {
      this.unset("deals");
    } else {
      this.set("deals", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Deal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deal", id.toString(), this);
  }

  static load(id: string): Deal | null {
    return store.get("Deal", id) as Deal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer(): string {
    let value = this.get("offer");
    return value.toString();
  }

  set offer(value: string) {
    this.set("offer", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get sellAmount(): BigInt {
    let value = this.get("sellAmount");
    return value.toBigInt();
  }

  set sellAmount(value: BigInt) {
    this.set("sellAmount", Value.fromBigInt(value));
  }

  get buyAmount(): BigInt {
    let value = this.get("buyAmount");
    return value.toBigInt();
  }

  set buyAmount(value: BigInt) {
    this.set("buyAmount", Value.fromBigInt(value));
  }

  get sellerVote(): BigInt | null {
    let value = this.get("sellerVote");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellerVote(value: BigInt | null) {
    if (value === null) {
      this.unset("sellerVote");
    } else {
      this.set("sellerVote", Value.fromBigInt(value as BigInt));
    }
  }

  get buyerVote(): BigInt | null {
    let value = this.get("buyerVote");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set buyerVote(value: BigInt | null) {
    if (value === null) {
      this.unset("buyerVote");
    } else {
      this.set("buyerVote", Value.fromBigInt(value as BigInt));
    }
  }

  get auditorVote(): BigInt | null {
    let value = this.get("auditorVote");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set auditorVote(value: BigInt | null) {
    if (value === null) {
      this.unset("auditorVote");
    } else {
      this.set("auditorVote", Value.fromBigInt(value as BigInt));
    }
  }

  get isPending(): boolean {
    let value = this.get("isPending");
    return value.toBoolean();
  }

  set isPending(value: boolean) {
    this.set("isPending", Value.fromBoolean(value));
  }

  get isSuccess(): boolean {
    let value = this.get("isSuccess");
    return value.toBoolean();
  }

  set isSuccess(value: boolean) {
    this.set("isSuccess", Value.fromBoolean(value));
  }

  get executor(): Bytes | null {
    let value = this.get("executor");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set executor(value: Bytes | null) {
    if (value === null) {
      this.unset("executor");
    } else {
      this.set("executor", Value.fromBytes(value as Bytes));
    }
  }
}

export class DealCommodity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DealCommodity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DealCommodity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DealCommodity", id.toString(), this);
  }

  static load(id: string): DealCommodity | null {
    return store.get("DealCommodity", id) as DealCommodity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer(): string {
    let value = this.get("offer");
    return value.toString();
  }

  set offer(value: string) {
    this.set("offer", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get offers(): Array<string> | null {
    let value = this.get("offers");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set offers(value: Array<string> | null) {
    if (value === null) {
      this.unset("offers");
    } else {
      this.set("offers", Value.fromStringArray(value as Array<string>));
    }
  }

  get commodityOffers(): Array<string> | null {
    let value = this.get("commodityOffers");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set commodityOffers(value: Array<string> | null) {
    if (value === null) {
      this.unset("commodityOffers");
    } else {
      this.set(
        "commodityOffers",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get deals(): Array<string> | null {
    let value = this.get("deals");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deals(value: Array<string> | null) {
    if (value === null) {
      this.unset("deals");
    } else {
      this.set("deals", Value.fromStringArray(value as Array<string>));
    }
  }

  get commodityDeals(): Array<string> | null {
    let value = this.get("commodityDeals");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set commodityDeals(value: Array<string> | null) {
    if (value === null) {
      this.unset("commodityDeals");
    } else {
      this.set("commodityDeals", Value.fromStringArray(value as Array<string>));
    }
  }

  get offchainReputation(): BigInt | null {
    let value = this.get("offchainReputation");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set offchainReputation(value: BigInt | null) {
    if (value === null) {
      this.unset("offchainReputation");
    } else {
      this.set("offchainReputation", Value.fromBigInt(value as BigInt));
    }
  }

  get isDealLocked(): boolean {
    let value = this.get("isDealLocked");
    return value.toBoolean();
  }

  set isDealLocked(value: boolean) {
    this.set("isDealLocked", Value.fromBoolean(value));
  }

  get goodReputation(): BigInt | null {
    let value = this.get("goodReputation");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set goodReputation(value: BigInt | null) {
    if (value === null) {
      this.unset("goodReputation");
    } else {
      this.set("goodReputation", Value.fromBigInt(value as BigInt));
    }
  }

  get badReputation(): BigInt | null {
    let value = this.get("badReputation");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set badReputation(value: BigInt | null) {
    if (value === null) {
      this.unset("badReputation");
    } else {
      this.set("badReputation", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenSymbol(): string {
    let value = this.get("tokenSymbol");
    return value.toString();
  }

  set tokenSymbol(value: string) {
    this.set("tokenSymbol", Value.fromString(value));
  }

  get tokenName(): string {
    let value = this.get("tokenName");
    return value.toString();
  }

  set tokenName(value: string) {
    this.set("tokenName", Value.fromString(value));
  }

  get isNFT(): boolean {
    let value = this.get("isNFT");
    return value.toBoolean();
  }

  set isNFT(value: boolean) {
    this.set("isNFT", Value.fromBoolean(value));
  }

  get category(): BigInt | null {
    let value = this.get("category");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set category(value: BigInt | null) {
    if (value === null) {
      this.unset("category");
    } else {
      this.set("category", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Commodity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Commodity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Commodity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Commodity", id.toString(), this);
  }

  static load(id: string): Commodity | null {
    return store.get("Commodity", id) as Commodity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get gold(): string | null {
    let value = this.get("gold");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set gold(value: string | null) {
    if (value === null) {
      this.unset("gold");
    } else {
      this.set("gold", Value.fromString(value as string));
    }
  }

  get diamond(): string | null {
    let value = this.get("diamond");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set diamond(value: string | null) {
    if (value === null) {
      this.unset("diamond");
    } else {
      this.set("diamond", Value.fromString(value as string));
    }
  }

  get offer(): string | null {
    let value = this.get("offer");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offer(value: string | null) {
    if (value === null) {
      this.unset("offer");
    } else {
      this.set("offer", Value.fromString(value as string));
    }
  }
}

export class Gold extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Gold entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Gold entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Gold", id.toString(), this);
  }

  static load(id: string): Gold | null {
    return store.get("Gold", id) as Gold | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reference(): string {
    let value = this.get("reference");
    return value.toString();
  }

  set reference(value: string) {
    this.set("reference", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get weight_brute(): BigInt | null {
    let value = this.get("weight_brute");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set weight_brute(value: BigInt | null) {
    if (value === null) {
      this.unset("weight_brute");
    } else {
      this.set("weight_brute", Value.fromBigInt(value as BigInt));
    }
  }

  get weight_fine(): BigInt | null {
    let value = this.get("weight_fine");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set weight_fine(value: BigInt | null) {
    if (value === null) {
      this.unset("weight_fine");
    } else {
      this.set("weight_fine", Value.fromBigInt(value as BigInt));
    }
  }

  get law(): BigInt | null {
    let value = this.get("law");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set law(value: BigInt | null) {
    if (value === null) {
      this.unset("law");
    } else {
      this.set("law", Value.fromBigInt(value as BigInt));
    }
  }

  get isLive(): boolean {
    let value = this.get("isLive");
    return value.toBoolean();
  }

  set isLive(value: boolean) {
    this.set("isLive", Value.fromBoolean(value));
  }

  get isP2P(): boolean {
    let value = this.get("isP2P");
    return value.toBoolean();
  }

  set isP2P(value: boolean) {
    this.set("isP2P", Value.fromBoolean(value));
  }

  get isFake(): boolean {
    let value = this.get("isFake");
    return value.toBoolean();
  }

  set isFake(value: boolean) {
    this.set("isFake", Value.fromBoolean(value));
  }

  get commodity(): string {
    let value = this.get("commodity");
    return value.toString();
  }

  set commodity(value: string) {
    this.set("commodity", Value.fromString(value));
  }
}

export class Diamond extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Diamond entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Diamond entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Diamond", id.toString(), this);
  }

  static load(id: string): Diamond | null {
    return store.get("Diamond", id) as Diamond | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reference(): string {
    let value = this.get("reference");
    return value.toString();
  }

  set reference(value: string) {
    this.set("reference", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get color(): BigInt | null {
    let value = this.get("color");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set color(value: BigInt | null) {
    if (value === null) {
      this.unset("color");
    } else {
      this.set("color", Value.fromBigInt(value as BigInt));
    }
  }

  get clarity(): BigInt | null {
    let value = this.get("clarity");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set clarity(value: BigInt | null) {
    if (value === null) {
      this.unset("clarity");
    } else {
      this.set("clarity", Value.fromBigInt(value as BigInt));
    }
  }

  get cut(): BigInt | null {
    let value = this.get("cut");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cut(value: BigInt | null) {
    if (value === null) {
      this.unset("cut");
    } else {
      this.set("cut", Value.fromBigInt(value as BigInt));
    }
  }

  get carat_weight(): BigInt | null {
    let value = this.get("carat_weight");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set carat_weight(value: BigInt | null) {
    if (value === null) {
      this.unset("carat_weight");
    } else {
      this.set("carat_weight", Value.fromBigInt(value as BigInt));
    }
  }

  get isLive(): boolean {
    let value = this.get("isLive");
    return value.toBoolean();
  }

  set isLive(value: boolean) {
    this.set("isLive", Value.fromBoolean(value));
  }

  get isP2P(): boolean {
    let value = this.get("isP2P");
    return value.toBoolean();
  }

  set isP2P(value: boolean) {
    this.set("isP2P", Value.fromBoolean(value));
  }

  get isFake(): boolean {
    let value = this.get("isFake");
    return value.toBoolean();
  }

  set isFake(value: boolean) {
    this.set("isFake", Value.fromBoolean(value));
  }

  get commodity(): string {
    let value = this.get("commodity");
    return value.toString();
  }

  set commodity(value: string) {
    this.set("commodity", Value.fromString(value));
  }
}

export class Auditor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Auditor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Auditor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Auditor", id.toString(), this);
  }

  static load(id: string): Auditor | null {
    return store.get("Auditor", id) as Auditor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requests(): Array<string> | null {
    let value = this.get("requests");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set requests(value: Array<string> | null) {
    if (value === null) {
      this.unset("requests");
    } else {
      this.set("requests", Value.fromStringArray(value as Array<string>));
    }
  }
}

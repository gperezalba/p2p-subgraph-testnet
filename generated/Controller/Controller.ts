// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class NewOwner extends EthereumEvent {
  get params(): NewOwner__Params {
    return new NewOwner__Params(this);
  }
}

export class NewOwner__Params {
  _event: NewOwner;

  constructor(event: NewOwner) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewBackend extends EthereumEvent {
  get params(): NewBackend__Params {
    return new NewBackend__Params(this);
  }
}

export class NewBackend__Params {
  _event: NewBackend;

  constructor(event: NewBackend) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewSwitcher extends EthereumEvent {
  get params(): NewSwitcher__Params {
    return new NewSwitcher__Params(this);
  }
}

export class NewSwitcher__Params {
  _event: NewSwitcher;

  constructor(event: NewSwitcher) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewAddress extends EthereumEvent {
  get params(): NewAddress__Params {
    return new NewAddress__Params(this);
  }
}

export class NewAddress__Params {
  _event: NewAddress;

  constructor(event: NewAddress) {
    this._event = event;
  }

  get kind(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isFactory(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewToken extends EthereumEvent {
  get params(): NewToken__Params {
    return new NewToken__Params(this);
  }
}

export class NewToken__Params {
  _event: NewToken;

  constructor(event: NewToken) {
    this._event = event;
  }

  get newToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get category(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isToken(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewNFToken extends EthereumEvent {
  get params(): NewNFToken__Params {
    return new NewNFToken__Params(this);
  }
}

export class NewNFToken__Params {
  _event: NewNFToken;

  constructor(event: NewNFToken) {
    this._event = event;
  }

  get newToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get category(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isNFToken(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewPNFToken extends EthereumEvent {
  get params(): NewPNFToken__Params {
    return new NewPNFToken__Params(this);
  }
}

export class NewPNFToken__Params {
  _event: NewPNFToken;

  constructor(event: NewPNFToken) {
    this._event = event;
  }

  get newToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get category(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isPNFToken(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewMarket extends EthereumEvent {
  get params(): NewMarket__Params {
    return new NewMarket__Params(this);
  }
}

export class NewMarket__Params {
  _event: NewMarket;

  constructor(event: NewMarket) {
    this._event = event;
  }

  get tokenA(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get market(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NewCommission extends EthereumEvent {
  get params(): NewCommission__Params {
    return new NewCommission__Params(this);
  }
}

export class NewCommission__Params {
  _event: NewCommission;

  constructor(event: NewCommission) {
    this._event = event;
  }

  get newCommission(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DiamondCut extends EthereumEvent {
  get params(): DiamondCut__Params {
    return new DiamondCut__Params(this);
  }
}

export class DiamondCut__Params {
  _event: DiamondCut;

  constructor(event: DiamondCut) {
    this._event = event;
  }

  get selector(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldFacet(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newFacet(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Controller extends SmartContract {
  static bind(address: Address): Controller {
    return new Controller("Controller", address);
  }

  kinds(param0: Address): BigInt {
    let result = super.call("kinds", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_kinds(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("kinds", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  backend(): Address {
    let result = super.call("backend", []);

    return result[0].toAddress();
  }

  try_backend(): CallResult<Address> {
    let result = super.tryCall("backend", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isFactory(param0: Address): boolean {
    let result = super.call("isFactory", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isFactory(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isFactory", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isToken(param0: Address): boolean {
    let result = super.call("isToken", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isToken(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isToken", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isNFToken(param0: Address): boolean {
    let result = super.call("isNFToken", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isNFToken(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isNFToken", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  on(): boolean {
    let result = super.call("on", []);

    return result[0].toBoolean();
  }

  try_on(): CallResult<boolean> {
    let result = super.tryCall("on", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  facets(param0: BigInt, param1: Bytes): Address {
    let result = super.call("facets", [
      EthereumValue.fromUnsignedBigInt(param0),
      EthereumValue.fromFixedBytes(param1)
    ]);

    return result[0].toAddress();
  }

  try_facets(param0: BigInt, param1: Bytes): CallResult<Address> {
    let result = super.tryCall("facets", [
      EthereumValue.fromUnsignedBigInt(param0),
      EthereumValue.fromFixedBytes(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  markets(param0: Address, param1: Address): Address {
    let result = super.call("markets", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toAddress();
  }

  try_markets(param0: Address, param1: Address): CallResult<Address> {
    let result = super.tryCall("markets", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isPNFToken(param0: Address): boolean {
    let result = super.call("isPNFToken", [EthereumValue.fromAddress(param0)]);

    return result[0].toBoolean();
  }

  try_isPNFToken(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isPNFToken", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  switcher(): Address {
    let result = super.call("switcher", []);

    return result[0].toAddress();
  }

  try_switcher(): CallResult<Address> {
    let result = super.tryCall("switcher", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  cuttable(): boolean {
    let result = super.call("cuttable", []);

    return result[0].toBoolean();
  }

  try_cuttable(): CallResult<boolean> {
    let result = super.tryCall("cuttable", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  commission(): BigInt {
    let result = super.call("commission", []);

    return result[0].toBigInt();
  }

  try_commission(): CallResult<BigInt> {
    let result = super.tryCall("commission", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  diamondOwner(): Address {
    let result = super.call("diamondOwner", []);

    return result[0].toAddress();
  }

  try_diamondOwner(): CallResult<Address> {
    let result = super.tryCall("diamondOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  addresses(param0: BigInt): Address {
    let result = super.call("addresses", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_addresses(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("addresses", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  upgradable(): boolean {
    let result = super.call("upgradable", []);

    return result[0].toBoolean();
  }

  try_upgradable(): CallResult<boolean> {
    let result = super.tryCall("upgradable", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class SetDiamondOwnerCall extends EthereumCall {
  get inputs(): SetDiamondOwnerCall__Inputs {
    return new SetDiamondOwnerCall__Inputs(this);
  }

  get outputs(): SetDiamondOwnerCall__Outputs {
    return new SetDiamondOwnerCall__Outputs(this);
  }
}

export class SetDiamondOwnerCall__Inputs {
  _call: SetDiamondOwnerCall;

  constructor(call: SetDiamondOwnerCall) {
    this._call = call;
  }

  get _newDiamondOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDiamondOwnerCall__Outputs {
  _call: SetDiamondOwnerCall;

  constructor(call: SetDiamondOwnerCall) {
    this._call = call;
  }
}

export class StopCutsCall extends EthereumCall {
  get inputs(): StopCutsCall__Inputs {
    return new StopCutsCall__Inputs(this);
  }

  get outputs(): StopCutsCall__Outputs {
    return new StopCutsCall__Outputs(this);
  }
}

export class StopCutsCall__Inputs {
  _call: StopCutsCall;

  constructor(call: StopCutsCall) {
    this._call = call;
  }
}

export class StopCutsCall__Outputs {
  _call: StopCutsCall;

  constructor(call: StopCutsCall) {
    this._call = call;
  }
}

export class DiamondCutCall extends EthereumCall {
  get inputs(): DiamondCutCall__Inputs {
    return new DiamondCutCall__Inputs(this);
  }

  get outputs(): DiamondCutCall__Outputs {
    return new DiamondCutCall__Outputs(this);
  }
}

export class DiamondCutCall__Inputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class DiamondCutCall__Outputs {
  _call: DiamondCutCall;

  constructor(call: DiamondCutCall) {
    this._call = call;
  }
}

export class StopUpgradesCall extends EthereumCall {
  get inputs(): StopUpgradesCall__Inputs {
    return new StopUpgradesCall__Inputs(this);
  }

  get outputs(): StopUpgradesCall__Outputs {
    return new StopUpgradesCall__Outputs(this);
  }
}

export class StopUpgradesCall__Inputs {
  _call: StopUpgradesCall;

  constructor(call: StopUpgradesCall) {
    this._call = call;
  }
}

export class StopUpgradesCall__Outputs {
  _call: StopUpgradesCall;

  constructor(call: StopUpgradesCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _switcher(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _backend(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _facets(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends EthereumCall {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _new(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetBackendCall extends EthereumCall {
  get inputs(): SetBackendCall__Inputs {
    return new SetBackendCall__Inputs(this);
  }

  get outputs(): SetBackendCall__Outputs {
    return new SetBackendCall__Outputs(this);
  }
}

export class SetBackendCall__Inputs {
  _call: SetBackendCall;

  constructor(call: SetBackendCall) {
    this._call = call;
  }

  get _new(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBackendCall__Outputs {
  _call: SetBackendCall;

  constructor(call: SetBackendCall) {
    this._call = call;
  }
}

export class SetSwitcherCall extends EthereumCall {
  get inputs(): SetSwitcherCall__Inputs {
    return new SetSwitcherCall__Inputs(this);
  }

  get outputs(): SetSwitcherCall__Outputs {
    return new SetSwitcherCall__Outputs(this);
  }
}

export class SetSwitcherCall__Inputs {
  _call: SetSwitcherCall;

  constructor(call: SetSwitcherCall) {
    this._call = call;
  }

  get _newSwitcher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSwitcherCall__Outputs {
  _call: SetSwitcherCall;

  constructor(call: SetSwitcherCall) {
    this._call = call;
  }
}

export class ToggleSwitchCall extends EthereumCall {
  get inputs(): ToggleSwitchCall__Inputs {
    return new ToggleSwitchCall__Inputs(this);
  }

  get outputs(): ToggleSwitchCall__Outputs {
    return new ToggleSwitchCall__Outputs(this);
  }
}

export class ToggleSwitchCall__Inputs {
  _call: ToggleSwitchCall;

  constructor(call: ToggleSwitchCall) {
    this._call = call;
  }
}

export class ToggleSwitchCall__Outputs {
  _call: ToggleSwitchCall;

  constructor(call: ToggleSwitchCall) {
    this._call = call;
  }
}

export class SetNewAddressCall extends EthereumCall {
  get inputs(): SetNewAddressCall__Inputs {
    return new SetNewAddressCall__Inputs(this);
  }

  get outputs(): SetNewAddressCall__Outputs {
    return new SetNewAddressCall__Outputs(this);
  }
}

export class SetNewAddressCall__Inputs {
  _call: SetNewAddressCall;

  constructor(call: SetNewAddressCall) {
    this._call = call;
  }

  get _kind(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _isFactory(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetNewAddressCall__Outputs {
  _call: SetNewAddressCall;

  constructor(call: SetNewAddressCall) {
    this._call = call;
  }
}

export class SetNewTokenCall extends EthereumCall {
  get inputs(): SetNewTokenCall__Inputs {
    return new SetNewTokenCall__Inputs(this);
  }

  get outputs(): SetNewTokenCall__Outputs {
    return new SetNewTokenCall__Outputs(this);
  }
}

export class SetNewTokenCall__Inputs {
  _call: SetNewTokenCall;

  constructor(call: SetNewTokenCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _category(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _is(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetNewTokenCall__Outputs {
  _call: SetNewTokenCall;

  constructor(call: SetNewTokenCall) {
    this._call = call;
  }
}

export class SetNewNFTokenCall extends EthereumCall {
  get inputs(): SetNewNFTokenCall__Inputs {
    return new SetNewNFTokenCall__Inputs(this);
  }

  get outputs(): SetNewNFTokenCall__Outputs {
    return new SetNewNFTokenCall__Outputs(this);
  }
}

export class SetNewNFTokenCall__Inputs {
  _call: SetNewNFTokenCall;

  constructor(call: SetNewNFTokenCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _category(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _is(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetNewNFTokenCall__Outputs {
  _call: SetNewNFTokenCall;

  constructor(call: SetNewNFTokenCall) {
    this._call = call;
  }
}

export class SetNewPNFTokenCall extends EthereumCall {
  get inputs(): SetNewPNFTokenCall__Inputs {
    return new SetNewPNFTokenCall__Inputs(this);
  }

  get outputs(): SetNewPNFTokenCall__Outputs {
    return new SetNewPNFTokenCall__Outputs(this);
  }
}

export class SetNewPNFTokenCall__Inputs {
  _call: SetNewPNFTokenCall;

  constructor(call: SetNewPNFTokenCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _category(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _is(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetNewPNFTokenCall__Outputs {
  _call: SetNewPNFTokenCall;

  constructor(call: SetNewPNFTokenCall) {
    this._call = call;
  }
}

export class SetNewMarketCall extends EthereumCall {
  get inputs(): SetNewMarketCall__Inputs {
    return new SetNewMarketCall__Inputs(this);
  }

  get outputs(): SetNewMarketCall__Outputs {
    return new SetNewMarketCall__Outputs(this);
  }
}

export class SetNewMarketCall__Inputs {
  _call: SetNewMarketCall;

  constructor(call: SetNewMarketCall) {
    this._call = call;
  }

  get _token1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _market(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetNewMarketCall__Outputs {
  _call: SetNewMarketCall;

  constructor(call: SetNewMarketCall) {
    this._call = call;
  }
}

export class SetTxCommissionCall extends EthereumCall {
  get inputs(): SetTxCommissionCall__Inputs {
    return new SetTxCommissionCall__Inputs(this);
  }

  get outputs(): SetTxCommissionCall__Outputs {
    return new SetTxCommissionCall__Outputs(this);
  }
}

export class SetTxCommissionCall__Inputs {
  _call: SetTxCommissionCall;

  constructor(call: SetTxCommissionCall) {
    this._call = call;
  }

  get _newCommission(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTxCommissionCall__Outputs {
  _call: SetTxCommissionCall;

  constructor(call: SetTxCommissionCall) {
    this._call = call;
  }
}
